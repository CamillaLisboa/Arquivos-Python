from abc import ABC, abstractmethod
from typing import List, Optional
from .event import BreakfastEvent
from .person import Student

class Notifier(ABC):
    @abstractmethod
    def notify(self, message: str) -> None: ...

class Repository(ABC):
    @abstractmethod
    def init_db(self) -> None: ...
    @abstractmethod
    def create_event(self, title: str, date: str) -> int: ...
    @abstractmethod
    def delete_event(self, event_id: int) -> None: ...
    @abstractmethod
    def list_events(self) -> List[BreakfastEvent]: ...
    @abstractmethod
    def get_event(self, event_id: int) -> Optional[BreakfastEvent]: ...
    @abstractmethod
    def ensure_student(self, name: str, contact: str) -> Student: ...
    @abstractmethod
    def list_students(self) -> List[Student]: ...
    @abstractmethod
    def add_participation(self, event_id: int, student_id: int, item: str) -> int: ...
    @abstractmethod
    def remove_participation(self, participation_id: int) -> None: ...
